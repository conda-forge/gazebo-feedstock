From fb8400b8a3e7e198e6944bacc268133eb489040b Mon Sep 17 00:00:00 2001
From: Silvio Traversaro <silvio@traversaro.it>
Date: Tue, 19 Aug 2025 17:45:46 +0200
Subject: [PATCH] Fix compatibility with protobuf 30

---
 gazebo/gui/ConfigWidget.cc               | 13 +++++++------
 gazebo/gui/ModelListWidget.cc            |  8 ++++++--
 gazebo/gui/plot/Palette.cc               |  2 +-
 gazebo/gui/plot/TopicCurveHandler.cc     |  2 +-
 gazebo/msgs/generator/GazeboGenerator.cc | 22 +++++++++++-----------
 gazebo/msgs/msgs.cc                      |  2 +-
 gazebo/transport/CallbackHelper.hh       |  2 +-
 gazebo/transport/Node.hh                 |  2 +-
 gazebo/transport/TopicManager.hh         |  2 +-
 9 files changed, 30 insertions(+), 25 deletions(-)

diff --git a/gazebo/gui/ConfigWidget.cc b/gazebo/gui/ConfigWidget.cc
index 5fd736adfc..968e845d60 100644
--- a/gazebo/gui/ConfigWidget.cc
+++ b/gazebo/gui/ConfigWidget.cc
@@ -595,7 +595,7 @@ QWidget *ConfigWidget::Parse(google::protobuf::Message *_msg,
     if (!ref)
       return NULL;
 
-    std::string name = field->name();
+    std::string name = std::string(field->name());
 
     // Parse each field in the message
     // TODO parse repeated fields
@@ -753,8 +753,9 @@ QWidget *ConfigWidget::Parse(google::protobuf::Message *_msg,
               std::string geometryTypeStr;
               if (typeValueDescriptor)
               {
+                std::string typeName = std::string(typeValueDescriptor->name());
                 geometryTypeStr =
-                    QString(typeValueDescriptor->name().c_str()).toLower().
+                    QString(typeName.c_str()).toLower().
                     toStdString();
               }
 
@@ -779,7 +780,7 @@ QWidget *ConfigWidget::Parse(google::protobuf::Message *_msg,
                 const google::protobuf::Descriptor *geomValueDescriptor =
                     geomValueMsg->GetDescriptor();
 
-                std::string geomMsgName = geomField->message_type()->name();
+                std::string geomMsgName = std::string(geomField->message_type()->name());
                 if (geomMsgName == "BoxGeom" || geomMsgName == "MeshGeom")
                 {
                   int fieldIdx = (geomMsgName == "BoxGeom") ? 0 : 1;
@@ -1001,7 +1002,7 @@ QWidget *ConfigWidget::Parse(google::protobuf::Message *_msg,
               const google::protobuf::EnumValueDescriptor *valueDescriptor =
                   descriptor->value(j);
               if (valueDescriptor)
-                enumValues.push_back(valueDescriptor->name());
+                enumValues.push_back(std::string(valueDescriptor->name()));
             }
             configChildWidget =
                 this->CreateEnumWidget(name, enumValues, _level);
@@ -1015,7 +1016,7 @@ QWidget *ConfigWidget::Parse(google::protobuf::Message *_msg,
 
             newFieldWidget = configChildWidget;
           }
-          this->UpdateEnumWidget(configChildWidget, value->name());
+          this->UpdateEnumWidget(configChildWidget, std::string(value->name()));
           break;
         }
         default:
@@ -2086,7 +2087,7 @@ void ConfigWidget::UpdateMsg(google::protobuf::Message *_msg,
     if (!ref)
       return;
 
-    std::string name = field->name();
+    std::string name = std::string(field->name());
 
     // Update each field in the message
     // TODO update repeated fields
diff --git a/gazebo/gui/ModelListWidget.cc b/gazebo/gui/ModelListWidget.cc
index 1b6b84942e..dabc4a2f65 100644
--- a/gazebo/gui/ModelListWidget.cc
+++ b/gazebo/gui/ModelListWidget.cc
@@ -1747,7 +1747,10 @@ void ModelListWidget::FillPropertyTree(const msgs::SphericalCoordinates &_msg,
   else
   {
     for (int i = 0; i < surfaceModelEnum->value_count(); ++i)
-      types << surfaceModelEnum->value(i)->name().c_str();
+    {
+      std::string  surfaceModelEnumStr(surfaceModelEnum->value(i)->name());
+      types << surfaceModelEnumStr.c_str();
+    }
   }
 
   item->setAttribute("enumNames", types);
@@ -3069,7 +3072,8 @@ void ModelListWidget::FillPropertyTree(const msgs::Physics &_msg,
     }
     else
     {
-      types << engineTypeEnum->value(_msg.type()-1)->name().c_str();
+      std::string engineTypeEnumStr = std::string(engineTypeEnum->value(_msg.type()-1)->name());
+      types << engineTypeEnumStr.c_str();
     }
 
     item->setAttribute("enumNames", types);
diff --git a/gazebo/gui/plot/Palette.cc b/gazebo/gui/plot/Palette.cc
index 7a02848d1d..9f8fd29e2f 100644
--- a/gazebo/gui/plot/Palette.cc
+++ b/gazebo/gui/plot/Palette.cc
@@ -1179,7 +1179,7 @@ void Palette::FillFromMsg(google::protobuf::Message *_msg,
     if (!field)
       return;
 
-    auto name = field->name();
+    auto name = std::string(field->name());
 
     if (field->is_repeated())
       continue;
diff --git a/gazebo/gui/plot/TopicCurveHandler.cc b/gazebo/gui/plot/TopicCurveHandler.cc
index c7103f9789..81cf9342af 100644
--- a/gazebo/gui/plot/TopicCurveHandler.cc
+++ b/gazebo/gui/plot/TopicCurveHandler.cc
@@ -370,7 +370,7 @@ void TopicCurve::UpdateCurve(google::protobuf::Message *_msg,
     if (!field)
       continue;
 
-    std::string fieldName = field->name();
+    std::string fieldName = std::string(field->name());
 
     // Check if message has timestamp and use it if it exists and is
     // a top level msg field.
diff --git a/gazebo/msgs/generator/GazeboGenerator.cc b/gazebo/msgs/generator/GazeboGenerator.cc
index 10d76c7df6..9aea1b0608 100644
--- a/gazebo/msgs/generator/GazeboGenerator.cc
+++ b/gazebo/msgs/generator/GazeboGenerator.cc
@@ -41,10 +41,10 @@ bool GazeboGenerator::Generate(const FileDescriptor *_file,
                                OutputDirectory *_generator_context,
                                std::string * /*_error*/) const
 {
-  std::string headerFilename = _file->name();
+  std::string headerFilename = std::string(_file->name());
   boost::replace_last(headerFilename, ".proto", ".pb.h");
 
-  std::string sourceFilename = _file->name();
+  std::string sourceFilename = std::string(_file->name());
   boost::replace_last(sourceFilename, ".proto", ".pb.cc");
 
   // Suppress expected warnings
@@ -80,12 +80,12 @@ bool GazeboGenerator::Generate(const FileDescriptor *_file,
         _generator_context->OpenForInsert(headerFilename, "namespace_scope"));
     io::Printer printer(output.get(), '$');
 
-    std::string package = _file->package();
+    std::string package = std::string(_file->package());
     boost::replace_all(package, ".", "::");
 
     std::string ptrType = "typedef boost::shared_ptr<" + package
-      + "::" + _file->message_type(0)->name() + "> "
-      + _file->message_type(0)->name() + "Ptr;\n";
+      + "::" + std::string(_file->message_type(0)->name()) + "> "
+      + std::string(_file->message_type(0)->name()) + "Ptr;\n";
 
     printer.Print(ptrType.c_str(), "name", "namespace_scope");
   }
@@ -96,12 +96,12 @@ bool GazeboGenerator::Generate(const FileDescriptor *_file,
         _generator_context->OpenForInsert(headerFilename, "global_scope"));
     io::Printer printer(output.get(), '$');
 
-    std::string package = _file->package();
+    std::string package = std::string(_file->package());
     boost::replace_all(package, ".", "::");
 
     std::string constType = "typedef const boost::shared_ptr<" + package
-      + "::" + _file->message_type(0)->name() + " const> Const"
-      + _file->message_type(0)->name() + "Ptr;";
+      + "::" + std::string(_file->message_type(0)->name()) + " const> Const"
+      + std::string(_file->message_type(0)->name()) + "Ptr;";
 
     printer.Print(constType.c_str(), "name", "global_scope");
   }
@@ -112,12 +112,12 @@ bool GazeboGenerator::Generate(const FileDescriptor *_file,
         _generator_context->OpenForInsert(sourceFilename, "global_scope"));
     io::Printer printer(output.get(), '$');
 
-    std::string package = _file->package();
+    std::string package = std::string(_file->package());
     boost::replace_all(package, ".", "::");
 
-    std::string name = _file->message_type(0)->name();
+    std::string name = std::string(_file->message_type(0)->name());
 
-    std::string constType = "GZ_REGISTER_STATIC_MSG(\"" + _file->package() +
+    std::string constType = "GZ_REGISTER_STATIC_MSG(\"" + std::string(_file->package()) +
       "." + name + "\", " + name + ")\n";
     printer.Print(constType.c_str(), "name", "namespace_scope");
   }
diff --git a/gazebo/msgs/msgs.cc b/gazebo/msgs/msgs.cc
index 6fc83841df..31e4056e82 100644
--- a/gazebo/msgs/msgs.cc
+++ b/gazebo/msgs/msgs.cc
@@ -118,7 +118,7 @@ namespace gazebo
 
       std::string *serialized_data = pkg.mutable_serialized_data();
       if (!message.IsInitialized())
-        gzthrow("Can't serialize message of type[" + message.GetTypeName() +
+        gzthrow("Can't serialize message of type[" + std::string(message.GetTypeName()) +
             "] because it is missing required fields");
 
       if (!message.SerializeToString(serialized_data))
diff --git a/gazebo/transport/CallbackHelper.hh b/gazebo/transport/CallbackHelper.hh
index 9bd50cc605..51a91cad36 100644
--- a/gazebo/transport/CallbackHelper.hh
+++ b/gazebo/transport/CallbackHelper.hh
@@ -136,7 +136,7 @@ namespace gazebo
                 if ((m = dynamic_cast<google::protobuf::Message*>(&test))
                     == NULL)
                   gzthrow("Message type must be a google::protobuf type\n");
-                return m->GetTypeName();
+                return std::string(m->GetTypeName());
               }
 
       // documentation inherited
diff --git a/gazebo/transport/Node.hh b/gazebo/transport/Node.hh
index 7883afdb1c..785772a7ad 100644
--- a/gazebo/transport/Node.hh
+++ b/gazebo/transport/Node.hh
@@ -228,7 +228,7 @@ namespace gazebo
                   const google::protobuf::Message &_message)
               {
                 transport::PublisherPtr pub = this->Advertise(_topic,
-                    _message.GetTypeName());
+                    std::string(_message.GetTypeName()));
                 pub->WaitForConnection();
 
                 pub->Publish(_message, true);
diff --git a/gazebo/transport/TopicManager.hh b/gazebo/transport/TopicManager.hh
index 6c05abae6e..71f8802a76 100644
--- a/gazebo/transport/TopicManager.hh
+++ b/gazebo/transport/TopicManager.hh
@@ -160,7 +160,7 @@ namespace gazebo
                 if (!msg)
                   gzthrow("Advertise requires a google protobuf type");
 
-                return this->Advertise(_topic, msg->GetTypeName(), _queueLimit,
+                return this->Advertise(_topic, std::string(msg->GetTypeName()), _queueLimit,
                         _hzRate);
               }
 
